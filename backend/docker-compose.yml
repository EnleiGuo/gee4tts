version: '3.8'

services:
  # TTS API服务
  tts-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tts-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://tts_user:tts_password@postgres:5432/tts_db
      - REDIS_URL=redis://redis:6379/0
      - VOLCANO_APP_ID=${VOLCANO_APP_ID}
      - VOLCANO_ACCESS_TOKEN=${VOLCANO_ACCESS_TOKEN}
      - VOLCANO_CLUSTER=${VOLCANO_CLUSTER:-volcano_tts}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./audio_files:/app/audio_files
      - ./temp_files:/app/temp_files
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - tts-network

  # PostgreSQL数据库
  postgres:
    image: postgres:13-alpine
    container_name: tts-postgres
    environment:
      POSTGRES_DB: tts_db
      POSTGRES_USER: tts_user
      POSTGRES_PASSWORD: tts_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - tts-network

  # Redis缓存
  redis:
    image: redis:6-alpine
    container_name: tts-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - tts-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: tts-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./audio_files:/var/www/audio:ro
    depends_on:
      - tts-api
    restart: unless-stopped
    networks:
      - tts-network

  # 监控服务（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: tts-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - tts-network
    profiles:
      - monitoring

  # Grafana仪表板（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: tts-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - tts-network
    profiles:
      - monitoring

networks:
  tts-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local